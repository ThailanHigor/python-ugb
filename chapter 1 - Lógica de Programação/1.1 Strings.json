{"cells":[{"cell_type":"markdown","metadata":{"id":"8L_c1dsm0-mS"},"source":["# Strings\n","\n","Em Python, variáveis do tipo `str`, ou **strings**, são as variáveis que armazenam informações de texto (por exemplo: seu nome, seu endereço, o seu tipo sanguíneo, etc). Como em outras linguagens de programação, as strings em Python são uma sequência (ou uma cadeia) de caracteres."]},{"cell_type":"markdown","metadata":{"id":"sWZNtOSr0-mV"},"source":["### 1. Criando strings\n","\n","Strings são criadas através de aspas simples (apóstrofos) ou aspas duplas (aspas)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SBYYI1cp0-mW"},"outputs":[],"source":["'Hello world!!!' # Usando apóstrofos para criar uma string"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"16b7IS0M0-mW"},"outputs":[],"source":["\"Hello world!!!\" # Usando aspas para criar uma string"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0qy5aWwX0-mX"},"outputs":[],"source":["# Criando uma variável string\n","nome = \"Valorant\"\n","nome"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OhVFpI2f0-mY"},"outputs":[],"source":["# Em outras IDE's, a forma correta de mostrar o conteúdo de uma variável é através do print\n","print(nome)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GY3Mvshl0-mY"},"outputs":[],"source":["# Verificando o tipo da variável nome\n","type(nome)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6x7nJ6bN0-mY"},"outputs":[],"source":["# Retornando o tamanho do string\n","len(nome)"]},{"cell_type":"markdown","metadata":{"id":"NkUcMDpJ0-mZ"},"source":["### 2. Indexação em strings\n","\n","Para acessarmos uma posição em particular, vamos utilizar os colchetes. Dentro de colchetes então colocamos o índice que desejamos acessar.\n","\n","s\\[índice\\] => Acessa uma única posição."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ug7KyQWR0-mZ"},"outputs":[],"source":["\"\"\"\n","Definindo a string s = \"Python\"\n","\n","+---+---+---+---+---+---+\n","| P | y | t | h | o | n |\n","+---+---+---+---+---+---+\n","  0   1   2   3   4   5\n","\"\"\"\n","s = \"Python\"\n","# Acessando cada caractere armazenado no string s\n","print(s[0]) # P\n","print(s[1]) # y\n","print(s[2]) # t\n","print(s[3]) # h\n","print(s[4]) # o\n","print(s[5]) # n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fs-Qu8Sw0-mZ"},"outputs":[],"source":["\"\"\"\n","+---+---+---+---+---+---+\n","| P | y | t | h | o | n |\n","+---+---+---+---+---+---+\n"," -6  -5  -4  -3  -2  -1\n","\"\"\"\n","# Acessando cada caractere armazenado no string s (utilizando índices decrescentes)\n","print(s[-6]) # P\n","print(s[-5]) # y\n","print(s[-4]) # t\n","print(s[-3]) # h\n","print(s[-2]) # o\n","print(s[-1]) # n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ie33C4kk0-mZ"},"outputs":[],"source":["# Acessando o caractere armazendo na última posição\n","# 1a opção\n","s[5]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K157dYMF0-mZ"},"outputs":[],"source":["# Acessando o caractere armazendo na última posição\n","# 2a opção\n","s[len(s)-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LK1OcjGx0-mZ"},"outputs":[],"source":["# Acessando o caractere armazendo na última posição\n","# 3a opção\n","s[-1]"]},{"cell_type":"markdown","metadata":{"id":"x_0Ol_U90-mZ"},"source":["### 3. Slicing (fatiamento) em strings\n","\n","Caso você deseje acessar mais de uma posição, você deve utilizar a técnica de *slicing* (ou fatiamento).\n","\n","* `s[ind]` => Acessa uma única posição.\n","* `s[inicial:final]` => Acessa os caracteres armazenados entre os índices *ind_inicial* e *ind_final-1*\n","* `s[inicial:final:inc]` => Acessa os caracteres armazenados entre os índices *inicial* e *ind_final-1* com incremento *inc*\n","\n","Em nosso exemplo vamos utilizar o string `Jupyter Notebook`.\n","\n","![Coloque a imagem String.png na mesma pasta que o notebook Strings.ipynb](String.png)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CkyleC8u0-mZ"},"outputs":[],"source":["# Redefinindo a string s\n","s = \"Jupyter Notebook\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"duKPktTo0-mZ"},"outputs":[],"source":["# Retornando apenas a palavra Jupyter - 1a opção\n","s[0:7] # Estamos acessando o string s a partir do índice 0 até o índice 6"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fGW3cNQg0-ma"},"outputs":[],"source":["# Acessando partes do string, a partir do início\n","p = \"Python\"\n","print(p[:0]) # ''\n","print(p[:1]) # 'P'\n","print(p[:2]) # 'Py'\n","print(p[:3]) # 'Pyt'\n","print(p[:4]) # 'Pyth'\n","print(p[:5]) # 'Pytho'\n","print(p[:6]) # 'Python'\n","print(p[:])  # 'Python'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8ithP21V0-ma"},"outputs":[],"source":["print(p[0:1]) # 'P'\n","print(p[0:2]) # 'Py'\n","print(p[0:3]) # 'Pyt'\n","print(p[0:4]) # 'Pyth'\n","print(p[0:5]) # 'Pytho'\n","print(p[0:6]) # 'Python'\n","print(p[0:])  # 'Python'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xygk4u2k0-mb"},"outputs":[],"source":["# Acessando partes do string, de uma posição qualquer até o final\n","print(p[:])  # 'Python'\n","print(p[0:]) # 'Python'\n","print(p[1:]) # 'ython'\n","print(p[2:]) # 'thon'\n","print(p[3:]) # 'hon'\n","print(p[4:]) # 'on'\n","print(p[5:]) # 'n'\n","print(p[6:]) # ''"]},{"cell_type":"markdown","source":["# CONTEÚDO EXTRA"],"metadata":{"id":"RTQYwGVe1KSb"}},{"cell_type":"markdown","metadata":{"id":"3OICUFT70-mb"},"source":["### 4. Operadores aplicados a strings\n","\n","| Operador | Significado   | Exemplo                    |\n","|:---|:---|:---|\n","| s\\[ind\\] | Acesso a uma posição | `s[0]` |\n","| s\\[i:f\\] | Acesso a uma faixa de posições | `s[1:3]` |\n","| s\\[i:f:inc\\] | Acesso a uma faixa de posições com incremento | `s[0:15:3]` |\n","| s1 + s2 | Concatenação de strings | `novastr = s1 + s2` |\n","| s\\*n | Retorna um string contendo n repetições de s | `s = 'ABC'*10` |\n","| s1 in s2 | Retorna True se o substring *s1* está contido em *s2* | `'ABC' in 'ABCDEFGH'` |\n","| s1 not in s2 | Retorna True se o substring *s1* não está contido em *s2* | `'XYZ' not in 'ABCDEFGH'` |"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H7ZS4JDw0-mb"},"outputs":[],"source":["s = \"A linguagem Python é demais!\"\n","s1 = \"Python\"\n","print(s[0])  # \"A\"\n","print(s[2:11]) # \"linguagem\"\n","print(s[::-1]) # \"\"!siamed é nohtyP megaugnil A\"\n","s2 = s + \" Sensacional!!!\" # Concatenação\n","print(s2)\n","s3 = s1*3 # Concatenando o string s1 3 vezes\n","print(s3)\n","print(\"O substring '{}' está contindo em '{}' => {}\".format(s1, s, s1 in s))\n","print(\"O substring '{}' não está contindo em '{}' => {}\".format(s3, s2, s3 not in s2))"]},{"cell_type":"markdown","metadata":{"id":"5MszkY700-mb"},"source":["### 5. Strings são imutáveis\n","\n","Vamos supor que queremos trocar um único caractere digitado errado em um string."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x4OgdXOw0-mb"},"outputs":[],"source":["s = \"PythoM\" # Python digitado com erro\n","s[5] = \"n\" # tentando corrigir, substituindo o caractere M armazenado no índice pelo n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OTtu8bLS0-me"},"outputs":[],"source":["# Para corrigir vamos precisar redefinir o string\n","s = \"Python\"\n","s"]},{"cell_type":"markdown","metadata":{"id":"OUNrsDrw0-me"},"source":["### 6. Métodos do objeto String\n","\n","| Método | Descrição | Exemplo |\n","|:------------|:---------------------------------------------------------------------------------------------|:--------------|\n","| [capitalize()](https://www.programiz.com/python-programming/methods/string/capitalize) | Retorna uma cópia da string com primeiro caractere maiúsculo e os caracteres restantes em minúsculo | `s.capitalize()`|\n","| [casefold()](https://www.programiz.com/python-programming/methods/string/casefold) | Retorna uma cópia da string convertido para letras minúsculas | `s.casefold()` |\n","| [center()](https://www.programiz.com/python-programming/methods/string/center) | Retorna uma cópia da string centralizada e preenchida com o caractere especificado (*default* = espaço em branco) | `s.center(20)` |\n","| [center()](https://www.programiz.com/python-programming/methods/string/center) | Retorna uma cópia da string centralizada e preenchida com o caractere especificado (*default* = espaço em branco) | `s.center(20, '*')` |\n","| [count()](https://www.programiz.com/python-programming/methods/string/count) | Retorna o número de ocorrências de um determinado substring | `s.count('abc')` |\n","| [encode()](https://www.programiz.com/python-programming/methods/string/encode) | Retorna uma cópia da string utilizando um determinando *encoding* (*default* = UTF-8)| `s.encode()`|\n","| [endswith()](https://www.programiz.com/python-programming/methods/string/endswith) | Retorna `True` se uma string terminar com o sufixo especificado | `s.endswith(\"python\")` |\n","| [expandtabs()](https://www.programiz.com/python-programming/methods/string/expandtabs) | Retorna uma cópia da string no qual os caracteres de tabulação `\\t` são substituídos por caracteres de espaço em branco | s.expandtabs(3)\n","| [find()](https://www.programiz.com/python-programming/methods/string/find) | Retorna o índice da primeira ocorrência da substring. Se não encontrado, retorna -1 | `s.find('python')` |\n","| [format()](https://www.programiz.com/python-programming/methods/string/format) | Formata a string de entrada em uma string de saída | `\"{} é {}\".format(\"Python\", \"demais!\")` |\n","| [index()](https://www.programiz.com/python-programming/methods/string/index) | Retorna o índice da primeira ocorrência de uma substring dentro da string. Se a substring não for encontrada, levanta uma exceção | `s.index('python')`|\n","| [isalnum()](https://www.programiz.com/python-programming/methods/string/isalnum) | Retorna `True` se todos os caracteres na string forem alfanuméricos (letras ou números) | `s.isalnum()`|\n","| [isalpha()](https://www.programiz.com/python-programming/methods/string/isalpha) | Retorna `True` se a string tiver apenas letras |`s.isalpha()`|\n","| isascii() | Retorna True se todos os caracteres na string forem ASCII | `s.isascii()`|\n","| [isdecimal()](https://www.programiz.com/python-programming/methods/string/isdecimal) | Retorna `True` se todos os caracteres na string forem decimais (0 a 9) | `s.isdecimal()` |\n","| [isdigit()](https://www.programiz.com/python-programming/methods/string/isdigit) | Retorna `True` se todos os caracteres na string forem dígitos (ex: 3²) | `s.isdigit()`|\n","| [isidentifier()](https://www.programiz.com/python-programming/methods/string/isidentifier) | Retorna `True` se a string for um identificador válido em Python | `s.isidentifier()`|\n","| [islower()](https://www.programiz.com/python-programming/methods/string/islower) | Retorna `True` se todos as letras da string forem letras minúsculas | `s.islower()` |\n","| [isnumeric()](https://www.programiz.com/python-programming/methods/string/isnumeric) | Retorna `True` se todos os caracteres na string forem numéricos (ex: ½) | `s.isnumeric()`|\n","| [isprintable()](https://www.programiz.com/python-programming/methods/string/isprintable) | Retorna `True` se todos os caracteres da string podem ser impressos | `s.isprintable()`|\n","| [isspace()](https://www.programiz.com/python-programming/methods/string/isspace) | Retorna `True` se houverem apenas espaços em branco na string | `s.isspace()` |\n","| [istitle()](https://www.programiz.com/python-programming/methods/string/istitle) | Retorna `True` se a string estiver em formato de *título*, ou seja, se cada palavra da string começa com letra maiúscula e tem o restante das letras minúsculas | `s.istitle()`|\n","| [isupper()](https://www.programiz.com/python-programming/methods/string/isupper) | Retorna `True` se todos as letras do string forem letras maiúsculas | `s.isupper()` |\n","| [ljust()](https://www.programiz.com/python-programming/methods/string/ljust) | Retorna uma cópia da string justificada à esquerda| `s.ljust(20)`|\n","| [lower()](https://www.programiz.com/python-programming/methods/string/lower) | Retorna uma cópia da string com as letras maiúsculas convertidas em minúsculas | `s.lower()`|\n","| [lstrip()](https://www.programiz.com/python-programming/methods/string/lstrip) | Retorna uma cópia da string com os caracteres passados por parâmetro removidos do início da string | `s.lstrip(' *@')` |\n","| [partition()](https://www.programiz.com/python-programming/methods/string/partition) | Divide a string e retorna uma tupla contendo a parte antes do separador (primeira ocorrência), a string de argumento (separador) e a parte após o separador | `s.partition('@')`|\n","| [replace()](https://www.programiz.com/python-programming/methods/string/replace) | Retorna uma cópia da string onde todas as ocorrências de uma substring são substituídas por outra | `s.partition('@',' at ')`|\n","| [rfind()](https://www.programiz.com/python-programming/methods/string/rfind) | Retorna o índice da última ocorrência da substring. Se não encontrado, retorna -1 | `s.rfind('python')` |\n","| [rindex()](https://www.programiz.com/python-programming/methods/string/rindex) | Retorna o índice da última ocorrência da substring dentro da string. Se a substring não for encontrada, levanta uma exceção | `s.rindex('python')`|\n","| [rjust()](https://www.programiz.com/python-programming/methods/string/rjust) | Retorna uma cópia da string justificada à direita | `s.rjust(20)`|\n","| [rpartition()](https://www.programiz.com/python-programming/methods/string/partition) | Divide a string e retorna uma tupla contendo a parte antes do separador (última ocorrência), a string de argumento (separador) e a parte após o separador | `s.rpartition('@')`|\n","| [rsplit()](https://www.programiz.com/python-programming/methods/string/rsplit) | Divide a string à partir da direita (última posição), usando um separador passado por parâmetro, e retorna uma lista de strings| `s.rsplit(';')`|\n","| [rstrip()](https://www.programiz.com/python-programming/methods/string/rstrip) | Retorna uma cópia da string com os caracteres passados por parâmetro removidos do final da string | `s.rstrip('!?.')` |\n","| [split()](https://www.programiz.com/python-programming/methods/string/split) | Divide a string à partir da esquerda (primeira posição), usando um separador passado por parâmetro, e retorna uma lista de strings| `s.split(';')`|\n","| [splitlines()](https://www.programiz.com/python-programming/methods/string/splitlines) | Divide e retorna as linhas contidas em uma string  | `s.splitlines()`|\n","| [starstwith()](https://www.programiz.com/python-programming/methods/string/startswith) | Retorna `True` se uma string começar com o prefixo especificado | `s.starstwith(\"Python\")` |\n","| [strip()](https://www.programiz.com/python-programming/methods/string/strip) | Retorna uma cópia da string com os caracteres passados por parâmetro removidos do início e do final da string | `s.strip(' *@')` |\n","| [swapcase()](https://www.w3schools.com/python/ref_string_swapcase.asp) | Retorna uma cópia da string com letras minúsculas convertidas em maiúsculas e vice-versa | `s.swapcase()`|\n","| [title()](https://www.programiz.com/python-programming/methods/string/title) | Retorna uma cópia da string com a primeira letra de cada palavra convertida para maiúscula | `s.title()` |\n","| [upper()](https://www.programiz.com/python-programming/methods/string/upper) | Retorna uma cópia da string com as letras minúsculas convertidas em maiúsculas | `s.upper()`|\n","| [zfill()](https://www.programiz.com/python-programming/methods/string/zfill) | Retorna uma cópia da string preenchida com 0s (zeros) à esquerda | `s.zfill(8)`|"]},{"cell_type":"markdown","metadata":{"id":"2vkoIBGq0-mf"},"source":["### Exemplo do método capitalize()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jrDlvqPl0-mf"},"outputs":[],"source":["s = \"a linguagem python é demais!\"\n","s.capitalize()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"stEzBKh-0-mf"},"outputs":[],"source":["# Importante ressaltar que a string s não foi alterada\n","s"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vvdGZKFd0-mf"},"outputs":[],"source":["s1 = s.capitalize()\n","print(s)\n","print(s1)"]},{"cell_type":"markdown","metadata":{"id":"wZdLMvJG0-mf"},"source":["### Exemplo dos métodos casefold(),  lower() e upper()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IQVKhifD0-mf"},"outputs":[],"source":["s = \"AbCdEf\"\n","s1 = s.casefold()\n","s1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"F9fI4eZr0-mf"},"outputs":[],"source":["s2 = s.lower()\n","s2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fUG0jM8L0-mf"},"outputs":[],"source":["s3 = s.upper()\n","s3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rHSQ_e5J0-mf"},"outputs":[],"source":["# casefold() é mais agressivo em sua conversão se comparado ao lower()\n","s4 = \"Der Fluß\"\n","s5 = s4.casefold()\n","s5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pryJKm8x0-mg"},"outputs":[],"source":["s6 = s4.lower()\n","s6"]},{"cell_type":"markdown","metadata":{"id":"m2Zl7X3j0-mg"},"source":["### Exemplo do método center()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tnZSUu0i0-mg"},"outputs":[],"source":["s = \"PYTHON\"\n","s"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sln53Poc0-mg"},"outputs":[],"source":["s1 = s.center(20) # Centralizar s em um string de tamanho 20 - completa com espaços a esquerda e direita\n","s1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2DseD54X0-mg"},"outputs":[],"source":["s2 = s.center(30, \"*\") # Centralizar s em um string de tamanho 30 - completa com espaços a esquerda e direita\n","s2"]},{"cell_type":"markdown","metadata":{"id":"Eajst8ih0-mg"},"source":["### Exemplo do método count()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5-JRwKlR0-mg"},"outputs":[],"source":["s = \"A linguagem Python é demais!\"\n","s.count(\"a\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Go9Z9A4T0-mg"},"outputs":[],"source":["s.count(\"A\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BZcODGwT0-mg"},"outputs":[],"source":["s.count(\"b\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RkWr-Mji0-mg"},"outputs":[],"source":["s.count(\"demais\")"]},{"cell_type":"markdown","metadata":{"id":"jNaFAHh40-mg"},"source":["### Exemplo do método encode()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yppM2yBh0-mh"},"outputs":[],"source":["s = \"Mоето име е Päivi\"\n","s1 = s.encode() # Codifica usando o UTF-8 por padrão\n","s1"]},{"cell_type":"markdown","metadata":{"id":"3YGwWw0K0-mh"},"source":["### Exemplo dos métodos endswith() e startswith()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"luYRwElb0-mh"},"outputs":[],"source":["s = \"A linguagem Python é demais!\"\n","s.endswith(\"demais\") # False"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ebyhZd2R0-mh"},"outputs":[],"source":["s.endswith(\"demais!\") # True"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"myDu4h7F0-mh"},"outputs":[],"source":["s.endswith(\"demais!\", 12) # True - Verifica se o substring a partir da posição 12 terminar com \"demais!\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rBfEiZ0u0-mh"},"outputs":[],"source":["s[2:18] # Substring formado da posição 2 à 17"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JEC8xTQv0-mh"},"outputs":[],"source":["s.endswith(\"Python\", 2, 18) # True"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FywuT7iY0-mh"},"outputs":[],"source":["s.startswith(\"A l\") # True"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zCfjT2Sq0-mh"},"outputs":[],"source":["s.startswith(\"Python\") # False"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Py8Lu5o10-mh"},"outputs":[],"source":["s.startswith(\"Python\", 12) # True"]},{"cell_type":"markdown","metadata":{"id":"KpS_L5eg0-mh"},"source":["### Exemplo do método expandtabs()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nJzS53ns0-mi"},"outputs":[],"source":["s = \"col1\\tcol2\\tcol3\"\n","print(s)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FAXUrDJQ0-mi"},"outputs":[],"source":["s1 = s.expandtabs() # Substitui as tabulações por espaços (default = 8)\n","print(s1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mi453fPj0-mi"},"outputs":[],"source":["print(\"Tabsize =  5\",s.expandtabs(5))\n","print(\"Tabsize =  6\",s.expandtabs(6))\n","print(\"Tabsize =  7\",s.expandtabs(7))\n","print(\"Tabsize =  8\",s.expandtabs())\n","print(\"Tabsize =  9\",s.expandtabs(9))\n","print(\"Tabsize = 10\",s.expandtabs(10))"]},{"cell_type":"markdown","metadata":{"id":"EueS-VOG0-mi"},"source":["### Exemplo dos métodos find(), rfind(), index() e rindex()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YbXT0VEL0-mi"},"outputs":[],"source":["s = \"A linguagem Python é demais! Python é sensacional.\"\n","s.find(\"Python\") # Procura pelo substring \"Python\" no string s usando o método find()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d1V3AYGP0-mi"},"outputs":[],"source":["s.rfind(\"Python\") # Procura pelo substring \"Python\" no string s usando o método rfind()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"461a-bcO0-mi"},"outputs":[],"source":["s.index(\"Python\") # Procura pelo substring \"Python\" no string s usando o método index()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"STEkQHBa0-mi"},"outputs":[],"source":["s.rindex(\"Python\") # Procura pelo substring \"Python\" no string s usando o método rindex()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YnhZTLqt0-mi"},"outputs":[],"source":["s.find(\"python\") # Procura pelo substring \"python\" no string s usando o método find()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vJNlhs400-mi"},"outputs":[],"source":["s.rfind(\"python\") # Procura pelo substring \"python\" no string s usando o método rfind()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lMhWuYWJ0-mi"},"outputs":[],"source":["s.index(\"python\") # Procura pelo substring \"python\" no string s usando o método index()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UKOioBNO0-mi"},"outputs":[],"source":["s.rindex(\"python\") # Procura pelo substring \"python\" no string s usando o método rindex()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-s7bcHNF0-mj"},"outputs":[],"source":["s1 = \"Olá! Este é um exemplo. Este é outro exemplo.\"\n","s1.find(\"Este\") # Procura pelo substring \"Este\" no string s usando o método find()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YVgeIbK70-mj"},"outputs":[],"source":["s1.rfind(\"Este\") # Procura pelo substring \"Este\" no string s usando o método rfind()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6PT1jyjs0-mj"},"outputs":[],"source":["s1.index(\"Este\") # Procura pelo substring \"Este\" no string s usando o método index()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XxzEpeKR0-mj"},"outputs":[],"source":["s1.rindex(\"Este\") # Procura pelo substring \"Este\" no string s usando o método rindex()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KM1QPNtN0-mj"},"outputs":[],"source":["s1.find(\"Este\", 15) # Procura pelo substring \"Este\" no string s, a partir do índice 15 usando o método find()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2TvGi0NO0-mj"},"outputs":[],"source":["s1.index(\"Este\", 15) # Procura pelo substring \"Este\" no string s, a partir do índice 15 usando o método index()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uZTklk7B0-mj"},"outputs":[],"source":["s1.find(\"Este\", 10, 20) # Procura pelo substring \"Este\" no string s, entre os índices 10 e 19 usando o método find()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wsiKpy4r0-mj"},"outputs":[],"source":["s1.index(\"Este\", 10, 20) # Procura pelo substring \"Este\" no string s, entre os índices 10 e 19 usando o método index()"]},{"cell_type":"markdown","metadata":{"id":"k_82Yjkm0-mj"},"source":["### Exemplo do método format()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qs5Kuw210-mj"},"outputs":[],"source":["nome = \"Joaquim\"\n","idade = 60\n","print(\"Meu nome é {} e tenho {} anos.\".format(nome, idade))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D80YlFV10-mj"},"outputs":[],"source":["print(\"Meu nome é {0} e tenho {1} anos.\".format(nome, idade))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PsUnhvpw0-mj"},"outputs":[],"source":["print(\"Meu nome é {} e tenho {} anos.\\nRepetindo... Meu nome é {} e tenho {} anos.\".format(nome, idade, nome, idade))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RWIWyPqP0-mj"},"outputs":[],"source":["print(\"Meu nome é {0} e tenho {1} anos.\\nRepetindo... Eu tenho {1} anos e meu nome é {0}.\".format(nome, idade))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K7KY0HCu0-mk"},"outputs":[],"source":["print(\"Meu nome é {name} e tenho {age} anos.\".format(age=18, name=\"Pedro\"))"]},{"cell_type":"markdown","metadata":{"id":"MSZYyFCL0-mk"},"source":["### Exemplo do método isalnum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uumQTmAx0-mk"},"outputs":[],"source":["s = \"D3C1FR4NDO\"\n","s.isalnum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NSWSEtvY0-mk"},"outputs":[],"source":["s1 = \"D3C1FR4NDO 0 CÓD1G0\"\n","s1.isalnum() # Falso por causa da presença de espaços"]},{"cell_type":"markdown","metadata":{"id":"2QqmKgtU0-mk"},"source":["### Exemplo do método isalpha()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"46J2tzaK0-mk"},"outputs":[],"source":["s = \"D3C1FR4NDO\"\n","s.isalpha()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dDO19v0R0-mk"},"outputs":[],"source":["s1 = \"CÓDIGO\"\n","s1.isalpha()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xcvmPJuw0-mk"},"outputs":[],"source":["s2 = \"DECIFRANDO O CODIGO\"\n","s2.isalpha()"]},{"cell_type":"markdown","metadata":{"id":"EXmOJ8E20-mk"},"source":["### Exemplo do método isascii()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-dq4Vla00-mk"},"outputs":[],"source":["cidade = 'ӓmsterdӓm'\n","cidade.isascii()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VtXCMM5j0-mk"},"outputs":[],"source":["cidade = 'amsterdam'\n","cidade.isascii()"]},{"cell_type":"markdown","metadata":{"id":"Ya32c1yh0-mk"},"source":["A tabela [ASCII](https://pt.wikipedia.org/wiki/ASCII) é composta por 128 \"caracteres\" (sendo a maioria caracteres \"imprimíveis\") e não contempla caracteres acentuados."]},{"cell_type":"markdown","metadata":{"id":"hFdE66bT0-mk"},"source":["### Exemplo dos métodos isdecimal(), isdigit() e isnumeric()\n","\n","* isdecimal() => 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n","* isdigit()   => caracteres decimais + subscrito e sobrescrito\n","* isnumeric   => caracteres decimais + subscrito e sobrescrito + caracteres UNICODE que representem frações, números romanos, etc"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7NH4Lgnx0-ml"},"outputs":[],"source":["a = \"12345\"\n","b = \"1234²\"\n","c = \"123²½\"\n","print(\"a.isdecimal() = \", a.isdecimal())\n","print(\"b.isdecimal() = \", b.isdecimal())\n","print(\"c.isdecimal() = \", c.isdecimal())\n","print(\"=\"*25)\n","print(\"a.isdigit() = \", a.isdigit())\n","print(\"b.isdigit() = \", b.isdigit())\n","print(\"c.isdigit() = \", c.isdigit())\n","print(\"=\"*25)\n","print(\"a.isnumeric() = \", a.isnumeric())\n","print(\"b.isnumeric() = \", b.isnumeric())\n","print(\"c.isnumeric() = \", c.isnumeric())"]},{"cell_type":"markdown","metadata":{"id":"dXboQsrN0-ml"},"source":["### Exemplo do método isidentifier()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3vNqGk0q0-ml"},"outputs":[],"source":["s = \"i23ER21\"\n","s.isidentifier()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r5YabCHr0-ml"},"outputs":[],"source":["s = \"_i23ER21\"\n","s.isidentifier()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vu_TeD4x0-ml"},"outputs":[],"source":["s = \"nome-aluno\"\n","s.isidentifier()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e2vLJOUw0-ml"},"outputs":[],"source":["s = \"nome aluno\"\n","s.isidentifier()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_3eprepQ0-ml"},"outputs":[],"source":["s = \"nome_aluno\"\n","s.isidentifier()"]},{"cell_type":"markdown","metadata":{"id":"Q1ng2IB90-ml"},"source":["### Exemplo dos métodos islower() e isupper()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Cnp9FF-x0-ml"},"outputs":[],"source":["s = \"nome_aluno\"\n","s.islower()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZpIoZx3d0-ml"},"outputs":[],"source":["s.isupper()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uGqPdRJZ0-ml"},"outputs":[],"source":["s1 = \"nomeAluno\"\n","s1.islower()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LDNUgczB0-ml"},"outputs":[],"source":["s1.isupper()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d7SnmYp70-ml"},"outputs":[],"source":["s2 = \"minha senh@ é 1234\"\n","s2.islower()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pfRLtzaG0-mm"},"outputs":[],"source":["s2.isupper()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EwbHR81j0-mm"},"outputs":[],"source":["s3 = \"TUDO MAIÚSCULO!!!\"\n","s3.islower()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vm5vBLlb0-mm"},"outputs":[],"source":["s3.isupper()"]},{"cell_type":"markdown","metadata":{"id":"D5xX3M8L0-mm"},"source":["### Exemplo do método isprintable()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rfg_I4o60-mm"},"outputs":[],"source":["s = \"col1\\tcol2\"\n","s.isprintable()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jD_WG9xE0-mm"},"outputs":[],"source":["s1 = s.expandtabs()\n","s1.isprintable()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WjTS7cjV0-mm"},"outputs":[],"source":["s2 = \"linha1\\nlinha2\"\n","s2.isprintable()"]},{"cell_type":"markdown","metadata":{"id":"vjd7YGmA0-mm"},"source":["### Exemplo do método isspace()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LNhjDB2M0-mm"},"outputs":[],"source":["s1 = \"A B\"\n","s1[0].isspace()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nu9x_eBL0-mn"},"outputs":[],"source":["s1[1].isspace()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aZIiVrq-0-mn"},"outputs":[],"source":["s1[2].isspace()"]},{"cell_type":"markdown","metadata":{"id":"ctN1-sg30-mn"},"source":["### Exemplo do método istitle()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yxBBdqB20-mn"},"outputs":[],"source":["titulo = \"A Linguagem Python\"\n","titulo.istitle()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oROwPK5d0-mn"},"outputs":[],"source":["titulo = \"A Linguagem de Programação Python\" # de => False\n","titulo.istitle()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YSDRXXN60-mn"},"outputs":[],"source":["titulo = \"A Linguagem DE Programação Python\" # DE => False\n","titulo.istitle()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NLbwZbiT0-mn"},"outputs":[],"source":["titulo = \"A Linguagem De Programação Python\"\n","titulo.istitle()"]},{"cell_type":"markdown","metadata":{"id":"blWSAUOr0-mn"},"source":["### Exemplo dos métodos ljust() e rjust()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dVY2eFAS0-mn"},"outputs":[],"source":["s = \"Esquerda\".ljust(20)\n","s"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gAXMt8tE0-mn"},"outputs":[],"source":["s1 = \"Direita\".rjust(20)\n","s1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XwXp6BHm0-mo"},"outputs":[],"source":["s2 = \"Esquerda\".ljust(20,\"<\")\n","s2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FO_0hA6_0-mo"},"outputs":[],"source":["s3 = \"Direita\".rjust(20,\">\")\n","s3"]},{"cell_type":"markdown","metadata":{"id":"UQbfPBae0-mo"},"source":["### Exemplo dos métodos lstrip(), rstrip() e strip()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YBem1yTK0-mo"},"outputs":[],"source":["s = \"      ABC   \"\n","s1 = s.lstrip()\n","s1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hbD9cP3S0-mo"},"outputs":[],"source":["s2 = s.rstrip()\n","s2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TB6jYnNH0-mo"},"outputs":[],"source":["s3 = s.strip()\n","s3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DvRCzB2M0-mo"},"outputs":[],"source":["link = \"https://www.python.org/\"\n","s4 = link.lstrip(\"hpst:/\")\n","s4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pe7b1pE50-mo"},"outputs":[],"source":["s5 = link.rstrip(\"hpst:/\")\n","s5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N-FoFuHt0-mo"},"outputs":[],"source":["s6 = link.strip(\"hpst:/\")\n","s6"]},{"cell_type":"markdown","metadata":{"id":"Jjzei8Ek0-mo"},"source":["### Exemplo dos métodos partition(), rpartition(), split() e rsplit()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YPCe9iQX0-mo"},"outputs":[],"source":["email = \"pessoa@dominio.com.br\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Anfx-MwL0-mo"},"outputs":[],"source":["t1 = email.partition(\"@\")\n","t1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6An883h00-mo"},"outputs":[],"source":["type(t1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oeSPbm7Z0-mp"},"outputs":[],"source":["l1 = email.split(\"@\")\n","l1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3FnSna_70-mp"},"outputs":[],"source":["type(l1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"atcMsX-I0-mp"},"outputs":[],"source":["l2 = email.rsplit(\"@\")\n","l2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3Qzocsds0-mp"},"outputs":[],"source":["t2 = email.partition(\".\")\n","t2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ORczgtv60-mp"},"outputs":[],"source":["l3 = email.split(\".\")\n","l3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RhNj-OLS0-mp"},"outputs":[],"source":["l4 = email.rsplit(\".\")\n","l4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IaKldqmq0-mp"},"outputs":[],"source":["l5 = email.split(\".\", 1)\n","l5"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6BQRSKFf0-mp"},"outputs":[],"source":["l6 = email.rsplit(\".\", 1)\n","l6"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xSJJUUvw0-mp"},"outputs":[],"source":["seq = \"012.345.678.910\"\n","t3 = seq.partition(\".\")\n","t3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Av4vD2710-mp"},"outputs":[],"source":["t4 = seq.rpartition(\".\")\n","t4"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6fYnxDJ20-mp"},"outputs":[],"source":["print(seq.split(\".\"))\n","print(seq.split(\".\", 1))\n","print(seq.split(\".\", 2))\n","print(seq.split(\".\", 3))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S7oRUASq0-mp"},"outputs":[],"source":["print(seq.rsplit(\".\"))\n","print(seq.rsplit(\".\", 1))\n","print(seq.rsplit(\".\", 2))\n","print(seq.rsplit(\".\", 3))"]},{"cell_type":"markdown","metadata":{"id":"-LvInbaA0-mp"},"source":["### Exemplo do método replace()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"flt8uePS0-mp"},"outputs":[],"source":["msg = \"Minha biblioteca favorita é numpy.\"\n","print(msg)\n","msg2 = msg.replace(\"numpy\", \"pandas\")\n","print(msg2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VovwjvuU0-mq"},"outputs":[],"source":["msg3 = \"Eu gosto de cães. Os cães são muito legais. Os cães são companheiros.\"\n","print(msg3)\n","msg4 = msg3.replace(\"cães\", \"labradores\", 2)\n","print(msg4)"]},{"cell_type":"markdown","metadata":{"id":"4DvoGkH10-mq"},"source":["### Exemplo do método splitlines()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4Sn3nSe0-mq"},"outputs":[],"source":["s = \"Essa é\\numa\\nstring\\n\\ncom várias\\nlinhas\"\n","print(s)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vEcfjyae0-mq"},"outputs":[],"source":["linhas = s.splitlines()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zrR4rxpp0-mq"},"outputs":[],"source":["linhas"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J9g-oFxF0-mq"},"outputs":[],"source":["type(linhas)"]},{"cell_type":"markdown","metadata":{"id":"ZheYXsun0-mq"},"source":["### Exemplo do método swapcase()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"baCC9Kkt0-mq"},"outputs":[],"source":["s = \"MAIÚSCULO | minúsculo!\"\n","s1 = s.swapcase()\n","print(s)\n","print(s1)"]},{"cell_type":"markdown","metadata":{"id":"lfmqA4Zj0-mq"},"source":["### Exemplo do método title()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pMADcAcH0-mq"},"outputs":[],"source":["titulo = \"a linguagEm de programação pyThon\"\n","novo_titulo = titulo.title()\n","print(novo_titulo)"]},{"cell_type":"markdown","metadata":{"id":"THGSOqT30-mq"},"source":["### Exemplo do método zfill()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nz0XrcXK0-mr"},"outputs":[],"source":["cod_prod1 = \"123\".zfill(6)\n","cod_prod1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kTYRBhMq0-mr"},"outputs":[],"source":["cod_prod2 = \"234\".zfill(8)\n","cod_prod2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"csfanorY0-mr"},"outputs":[],"source":["cod_prod3 = \"123456\".zfill(5)\n","cod_prod3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BJk69sY90-mr"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}